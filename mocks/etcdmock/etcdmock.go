// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/innovate-technologies/Dispatch/interfaces (interfaces: EtcdAPI)

package etcdmock

import (
	clientv3 "github.com/coreos/etcd/clientv3"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// MockEtcdAPI is a mock of EtcdAPI interface
type MockEtcdAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEtcdAPIMockRecorder
}

// MockEtcdAPIMockRecorder is the mock recorder for MockEtcdAPI
type MockEtcdAPIMockRecorder struct {
	mock *MockEtcdAPI
}

// NewMockEtcdAPI creates a new mock instance
func NewMockEtcdAPI(ctrl *gomock.Controller) *MockEtcdAPI {
	mock := &MockEtcdAPI{ctrl: ctrl}
	mock.recorder = &MockEtcdAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockEtcdAPI) EXPECT() *MockEtcdAPIMockRecorder {
	return _m.recorder
}

// Compact mocks base method
func (_m *MockEtcdAPI) Compact(_param0 context.Context, _param1 int64, _param2 ...clientv3.CompactOption) (*clientv3.CompactResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Compact", _s...)
	ret0, _ := ret[0].(*clientv3.CompactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compact indicates an expected call of Compact
func (_mr *MockEtcdAPIMockRecorder) Compact(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Compact", _s...)
}

// Delete mocks base method
func (_m *MockEtcdAPI) Delete(_param0 context.Context, _param1 string, _param2 ...clientv3.OpOption) (*clientv3.DeleteResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Delete", _s...)
	ret0, _ := ret[0].(*clientv3.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockEtcdAPIMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", _s...)
}

// Do mocks base method
func (_m *MockEtcdAPI) Do(_param0 context.Context, _param1 clientv3.Op) (clientv3.OpResponse, error) {
	ret := _m.ctrl.Call(_m, "Do", _param0, _param1)
	ret0, _ := ret[0].(clientv3.OpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (_mr *MockEtcdAPIMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Do", arg0, arg1)
}

// Get mocks base method
func (_m *MockEtcdAPI) Get(_param0 context.Context, _param1 string, _param2 ...clientv3.OpOption) (*clientv3.GetResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Get", _s...)
	ret0, _ := ret[0].(*clientv3.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockEtcdAPIMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", _s...)
}

// Put mocks base method
func (_m *MockEtcdAPI) Put(_param0 context.Context, _param1 string, _param2 string, _param3 ...clientv3.OpOption) (*clientv3.PutResponse, error) {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Put", _s...)
	ret0, _ := ret[0].(*clientv3.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (_mr *MockEtcdAPIMockRecorder) Put(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", _s...)
}

// Txn mocks base method
func (_m *MockEtcdAPI) Txn(_param0 context.Context) clientv3.Txn {
	ret := _m.ctrl.Call(_m, "Txn", _param0)
	ret0, _ := ret[0].(clientv3.Txn)
	return ret0
}

// Txn indicates an expected call of Txn
func (_mr *MockEtcdAPIMockRecorder) Txn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Txn", arg0)
}

// Watch mocks base method
func (_m *MockEtcdAPI) Watch(_param0 context.Context, _param1 string, _param2 ...clientv3.OpOption) clientv3.WatchChan {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Watch", _s...)
	ret0, _ := ret[0].(clientv3.WatchChan)
	return ret0
}

// Watch indicates an expected call of Watch
func (_mr *MockEtcdAPIMockRecorder) Watch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watch", _s...)
}
