// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/innovate-technologies/Dispatch/dispatchd/unit (interfaces: UnitInterface)

package unitmock

import (
	gomock "github.com/golang/mock/gomock"
	state "github.com/innovate-technologies/Dispatch/dispatchd/unit/state"
)

// MockUnitInterface is a mock of UnitInterface interface
type MockUnitInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUnitInterfaceMockRecorder
}

// MockUnitInterfaceMockRecorder is the mock recorder for MockUnitInterface
type MockUnitInterfaceMockRecorder struct {
	mock *MockUnitInterface
}

// NewMockUnitInterface creates a new mock instance
func NewMockUnitInterface(ctrl *gomock.Controller) *MockUnitInterface {
	mock := &MockUnitInterface{ctrl: ctrl}
	mock.recorder = &MockUnitInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockUnitInterface) EXPECT() *MockUnitInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockUnitInterface) Create() {
	_m.ctrl.Call(_m, "Create")
}

// Create indicates an expected call of Create
func (_mr *MockUnitInterfaceMockRecorder) Create() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create")
}

// Destroy mocks base method
func (_m *MockUnitInterface) Destroy() {
	_m.ctrl.Call(_m, "Destroy")
}

// Destroy indicates an expected call of Destroy
func (_mr *MockUnitInterfaceMockRecorder) Destroy() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Destroy")
}

// LoadAndWatch mocks base method
func (_m *MockUnitInterface) LoadAndWatch() {
	_m.ctrl.Call(_m, "LoadAndWatch")
}

// LoadAndWatch indicates an expected call of LoadAndWatch
func (_mr *MockUnitInterfaceMockRecorder) LoadAndWatch() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadAndWatch")
}

// PutOnQueue mocks base method
func (_m *MockUnitInterface) PutOnQueue() {
	_m.ctrl.Call(_m, "PutOnQueue")
}

// PutOnQueue indicates an expected call of PutOnQueue
func (_mr *MockUnitInterfaceMockRecorder) PutOnQueue() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutOnQueue")
}

// Restart mocks base method
func (_m *MockUnitInterface) Restart() {
	_m.ctrl.Call(_m, "Restart")
}

// Restart indicates an expected call of Restart
func (_mr *MockUnitInterfaceMockRecorder) Restart() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Restart")
}

// SaveOnEtcd mocks base method
func (_m *MockUnitInterface) SaveOnEtcd() {
	_m.ctrl.Call(_m, "SaveOnEtcd")
}

// SaveOnEtcd indicates an expected call of SaveOnEtcd
func (_mr *MockUnitInterfaceMockRecorder) SaveOnEtcd() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SaveOnEtcd")
}

// SetDesiredState mocks base method
func (_m *MockUnitInterface) SetDesiredState(_param0 state.State) {
	_m.ctrl.Call(_m, "SetDesiredState", _param0)
}

// SetDesiredState indicates an expected call of SetDesiredState
func (_mr *MockUnitInterfaceMockRecorder) SetDesiredState(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDesiredState", arg0)
}

// SetState mocks base method
func (_m *MockUnitInterface) SetState(_param0 state.State) {
	_m.ctrl.Call(_m, "SetState", _param0)
}

// SetState indicates an expected call of SetState
func (_mr *MockUnitInterfaceMockRecorder) SetState(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetState", arg0)
}

// Start mocks base method
func (_m *MockUnitInterface) Start() {
	_m.ctrl.Call(_m, "Start")
}

// Start indicates an expected call of Start
func (_mr *MockUnitInterfaceMockRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}

// Stop mocks base method
func (_m *MockUnitInterface) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

// Stop indicates an expected call of Stop
func (_mr *MockUnitInterfaceMockRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

// Watch mocks base method
func (_m *MockUnitInterface) Watch() {
	_m.ctrl.Call(_m, "Watch")
}

// Watch indicates an expected call of Watch
func (_mr *MockUnitInterfaceMockRecorder) Watch() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watch")
}
