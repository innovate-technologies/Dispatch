// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/innovate-technologies/Dispatch/dispatchd/unit (interfaces: DBusConnectionInterface)

package dbusmock

import (
	"time"

	dbus "github.com/coreos/go-systemd/dbus"
	gomock "github.com/golang/mock/gomock"
)

// MockDBusConnectionInterface is a mock of DBusConnectionInterface interface
type MockDBusConnectionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBusConnectionInterfaceMockRecorder
}

// MockDBusConnectionInterfaceMockRecorder is the mock recorder for MockDBusConnectionInterface
type MockDBusConnectionInterfaceMockRecorder struct {
	mock *MockDBusConnectionInterface
}

// NewMockDBusConnectionInterface creates a new mock instance
func NewMockDBusConnectionInterface(ctrl *gomock.Controller) *MockDBusConnectionInterface {
	mock := &MockDBusConnectionInterface{ctrl: ctrl}
	mock.recorder = &MockDBusConnectionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDBusConnectionInterface) EXPECT() *MockDBusConnectionInterfaceMockRecorder {
	return _m.recorder
}

// KillUnit mocks base method
func (_m *MockDBusConnectionInterface) KillUnit(_param0 string, _param1 int32) {
	_m.ctrl.Call(_m, "KillUnit", _param0, _param1)
}

// KillUnit indicates an expected call of KillUnit
func (_mr *MockDBusConnectionInterfaceMockRecorder) KillUnit(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KillUnit", arg0, arg1)
}

// LinkUnitFiles mocks base method
func (_m *MockDBusConnectionInterface) LinkUnitFiles(_param0 []string, _param1 bool, _param2 bool) ([]dbus.LinkUnitFileChange, error) {
	ret := _m.ctrl.Call(_m, "LinkUnitFiles", _param0, _param1, _param2)
	ret0, _ := ret[0].([]dbus.LinkUnitFileChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkUnitFiles indicates an expected call of LinkUnitFiles
func (_mr *MockDBusConnectionInterfaceMockRecorder) LinkUnitFiles(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LinkUnitFiles", arg0, arg1, arg2)
}

// Reload mocks base method
func (_m *MockDBusConnectionInterface) Reload() error {
	ret := _m.ctrl.Call(_m, "Reload")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload
func (_mr *MockDBusConnectionInterfaceMockRecorder) Reload() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reload")
}

// StartUnit mocks base method
func (_m *MockDBusConnectionInterface) StartUnit(_param0 string, _param1 string, _param2 chan<- string) (int, error) {
	ret := _m.ctrl.Call(_m, "StartUnit", _param0, _param1, _param2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	go sendDone(_param2)
	return ret0, ret1
}

// StartUnit indicates an expected call of StartUnit
func (_mr *MockDBusConnectionInterfaceMockRecorder) StartUnit(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartUnit", arg0, arg1, arg2)
}

// StopUnit mocks base method
func (_m *MockDBusConnectionInterface) StopUnit(_param0 string, _param1 string, _param2 chan<- string) (int, error) {
	ret := _m.ctrl.Call(_m, "StopUnit", _param0, _param1, _param2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	go sendDone(_param2)
	return ret0, ret1
}

// StopUnit indicates an expected call of StopUnit
func (_mr *MockDBusConnectionInterfaceMockRecorder) StopUnit(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopUnit", arg0, arg1, arg2)
}

func sendDone(c chan<- string) {
	time.Sleep(1 * time.Second)
	c <- "done"
}
